// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING") 
}

// schema.prisma

model User {
  id        Int        @id @default(autoincrement())
  username  String
  email     String
  password  String
  createdAt DateTime   @default(now())
  // Add other user-related fields as needed
  order     Order[]
  cart      CartItem[]
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  rating      Rating?
  price       Int
  description String
  category    Category  @relation(fields: [categoryId], references: [id])
  categoryId  Int
  stock       Int
  imageUrls   String[]
  cartItem    CartItem?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  size        Size      @relation(fields: [sizeId], references: [id])
  sizeId      Int
  colour      Colour    @relation(fields: [colourId], references: [id])
  colourId    Int
}

model Size {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Colour {
  id        Int       @id @default(autoincrement())
  name      String
  value     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int      @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order?   @relation(fields: [orderId], references: [id])
  orderId   Int?     @unique
}

model Rating {
  id        Int     @id @default(autoincrement())
  rate      Float
  count     Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int     @unique
}

model Order {
  id           Int        @id @default(autoincrement())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  status       String
  user         User       @relation(fields: [userId], references: [id])
  userId       Int        @unique
  orderItem    CartItem[]
  phone        String     @default("")
  address      String     @default("")
  emailAddress String
}

model Billboard {
  id        Int      @id @default(autoincrement())
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  label     String
}
